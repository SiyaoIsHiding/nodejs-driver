{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.2",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "cassandra-driver!",
  "docComment": "",
  "name": "cassandra-driver",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "cassandra-driver!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!auth:var",
          "docComment": "/**\n * DSE Authentication module. <p> Contains the classes used for connecting to a DSE cluster secured with DseAuthenticator. </p>  @module auth\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$8: "
            },
            {
              "kind": "Content",
              "text": "{\n    Authenticator: typeof "
            },
            {
              "kind": "Reference",
              "text": "Authenticator",
              "canonicalReference": "cassandra-driver!~Authenticator:class"
            },
            {
              "kind": "Content",
              "text": ";\n    AuthProvider: typeof "
            },
            {
              "kind": "Reference",
              "text": "AuthProvider",
              "canonicalReference": "cassandra-driver!~AuthProvider:class"
            },
            {
              "kind": "Content",
              "text": ";\n    DseGssapiAuthProvider: typeof "
            },
            {
              "kind": "Reference",
              "text": "DseGssapiAuthProvider",
              "canonicalReference": "cassandra-driver!~DseGssapiAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": ";\n    DsePlainTextAuthProvider: typeof "
            },
            {
              "kind": "Reference",
              "text": "DsePlainTextAuthProvider",
              "canonicalReference": "cassandra-driver!~DsePlainTextAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": ";\n    NoAuthProvider: typeof "
            },
            {
              "kind": "Reference",
              "text": "NoAuthProvider",
              "canonicalReference": "cassandra-driver!~NoAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": ";\n    PlainTextAuthProvider: typeof "
            },
            {
              "kind": "Reference",
              "text": "PlainTextAuthProvider",
              "canonicalReference": "cassandra-driver!~PlainTextAuthProvider:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "auth",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 14
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "cassandra-driver!Client:class",
          "docComment": "/**\n * Creates a new instance of {@link Client}.  @classdesc Represents a database client that maintains multiple connections to the cluster nodes, providing methods to execute CQL statements. <p> The <code>Client</code> uses [policies]{@link module:policies} to decide which nodes to connect to, which node to use per each query execution, when it should retry failed or timed-out executions and how reconnection to down nodes should be made. </p>  @extends EventEmitter\n *\n * @param options - The options for this instance.\n *\n * @example\n *\n * <caption>Creating a new client instance</caption> const client = new Client({ contactPoints: ['10.0.1.101', '10.0.1.102'], localDataCenter: 'datacenter1' });\n *\n * @example\n *\n * <caption>Executing a query</caption> const result = await client.connect(); console.log(`Connected to ${client.hosts.length} nodes in the cluster: ${client.hosts.keys().join(', ')}`);\n *\n * @example\n *\n * <caption>Executing a query</caption> const result = await client.execute('SELECT key FROM system.local'); const row = result.first(); console.log(row['key']);\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class Client extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter.EventEmitter",
              "canonicalReference": "!\"\\\"events\\\"\".EventEmitter.EventEmitter"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Client",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "cassandra-driver!Client:constructor(1)",
              "docComment": "/**\n * Creates a new instance of {@link Client}. Represents a database client that maintains multiple connections to the cluster nodes, providing methods to execute CQL statements. <p> The <code>Client</code> uses [policies]{@link module:policies} to decide which nodes to connect to, which node to use per each query execution, when it should retry failed or timed-out executions and how reconnection to down nodes should be made. </p>\n *\n * @param options - The options for this instance.\n *\n * @example\n *\n * <caption>Creating a new client instance</caption> const client = new Client({ contactPoints: ['10.0.1.101', '10.0.1.102'], localDataCenter: 'datacenter1' });\n *\n * @example\n *\n * <caption>Executing a query</caption> const result = await client.connect(); console.log(`Connected to ${client.hosts.length} nodes in the cluster: ${client.hosts.keys().join(', ')}`);\n *\n * @example\n *\n * <caption>Executing a query</caption> const result = await client.execute('SELECT key FROM system.local'); const row = result.first(); console.log(row['key']);  @constructor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "DseClientOptions",
                  "canonicalReference": "cassandra-driver!~DseClientOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#batch:member(1)",
              "docComment": "/**\n * Executes batch of queries on an available connection to a host. <p>It returns a <code>Promise</code> when a <code>callback</code> is not provided.</p>\n *\n * @param queries - The queries to execute as an Array of strings or as an array of object containing the query and params\n *\n * @param options - The query options.\n *\n * @param callback - Executes callback(err, result) when the batch was executed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "batch(queries: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | {\n        query: string;\n        params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "queries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "batch"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#batch:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "batch(queries: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | {\n        query: string;\n        params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "queries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 12
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "batch"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#batch:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "batch(queries: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | {\n        query: string;\n        params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "queries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "batch"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#connect:member(1)",
              "docComment": "/**\n * Attempts to connect to one of the [contactPoints]{@link ClientOptions} and discovers the rest the nodes of the cluster. <p>When the {@link Client} is already connected, it resolves immediately.</p> <p>It returns a <code>Promise</code> when a <code>callback</code> is not provided.</p>\n *\n * @param callback - The optional callback that is invoked when the pool is connected or it failed to connect.\n *\n * @example\n *\n * <caption>Usage example</caption> await client.connect();\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#connect:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(callback: "
                },
                {
                  "kind": "Reference",
                  "text": "EmptyCallback",
                  "canonicalReference": "cassandra-driver!~EmptyCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#eachRow:member(1)",
              "docComment": "/**\n * Executes the query and calls <code>rowCallback</code> for each row as soon as they are received. Calls the final <code>callback</code> after all rows have been sent, or when there is an error. <p> The query can be prepared (recommended) or not depending on the [prepare]{@linkcode QueryOptions} flag. </p>\n *\n * @param query - The query to execute\n *\n * @param params - Array of parameter values or an associative array (object) containing parameter names as keys and its value.\n *\n * @param options - The query options.\n *\n * @param rowCallback - Executes <code>rowCallback(n, row)</code> per each row received, where n is the row index and row is the current Row.\n *\n * @param callback - Executes <code>callback(err, result)</code> after all rows have been received. <p> When dealing with paged results, [ResultSet#nextPage()]{@link module:types~ResultSet#nextPage} method can be used to retrieve the following page. In that case, <code>rowCallback()</code> will be again called for each row and the final callback will be invoked when all rows in the following page has been retrieved. </p>\n *\n * @example\n *\n * <caption>Using per-row callback and arrow functions</caption> client.eachRow(query, params, { prepare: true }, (n, row) => console.log(n, row), err => console.error(err));\n *\n * @example\n *\n * <caption>Overloads</caption> client.eachRow(query, rowCallback); client.eachRow(query, params, rowCallback); client.eachRow(query, params, options, rowCallback); client.eachRow(query, params, rowCallback, callback); client.eachRow(query, params, options, rowCallback, callback);\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eachRow(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", params: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", rowCallback: "
                },
                {
                  "kind": "Content",
                  "text": "(n: number, row: "
                },
                {
                  "kind": "Reference",
                  "text": "Row",
                  "canonicalReference": "cassandra-driver!~Row:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ", callback?: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 17
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rowCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 15
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "eachRow"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#eachRow:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eachRow(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", params: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", rowCallback: "
                },
                {
                  "kind": "Content",
                  "text": "(n: number, row: "
                },
                {
                  "kind": "Reference",
                  "text": "Row",
                  "canonicalReference": "cassandra-driver!~Row:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ", callback?: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rowCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 13
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "eachRow"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#eachRow:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eachRow(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", rowCallback: "
                },
                {
                  "kind": "Content",
                  "text": "(n: number, row: "
                },
                {
                  "kind": "Reference",
                  "text": "Row",
                  "canonicalReference": "cassandra-driver!~Row:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "rowCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "eachRow"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#execute:member(1)",
              "docComment": "/**\n * Executes a query on an available connection. <p>The query can be prepared (recommended) or not depending on the [prepare]{@linkcode QueryOptions} flag.</p> <p> Some execution failures can be handled transparently by the driver, according to the [RetryPolicy]{@linkcode module:policies/retry~RetryPolicy} or the [SpeculativeExecutionPolicy]{@linkcode module:policies/speculativeExecution} used. </p> <p>It returns a <code>Promise</code> when a <code>callback</code> is not provided.</p>\n *\n * @param query - The query to execute.\n *\n * @param params - Array of parameter values or an associative array (object) containing parameter names as keys and its value.\n *\n * @param options - The query options for the execution.\n *\n * @param callback - Executes callback(err, result) when execution completed. When not defined, the method will return a promise.\n *\n * @example\n *\n * <caption>Promise-based API, using async/await</caption> const query = 'SELECT name, email FROM users WHERE id = ?'; const result = await client.execute(query, [ id ], { prepare: true }); const row = result.first(); console.log('%s: %s', row['name'], row['email']);\n *\n * @example\n *\n * <caption>Callback-based API</caption> const query = 'SELECT name, email FROM users WHERE id = ?'; client.execute(query, [ id ], { prepare: true }, function (err, result) { assert.ifError(err); const row = result.first(); console.log('%s: %s', row['name'], row['email']); });\n *\n * @see\n *\n * {@link ExecutionProfile} to reuse a set of options across different query executions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#execute:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", params: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#execute:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", params: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#execute:member(4)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ResultSet",
                  "canonicalReference": "cassandra-driver!~ResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "execute"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#executeGraph:member(1)",
              "docComment": "/**\n * Executes a graph query. <p>It returns a <code>Promise</code> when a <code>callback</code> is not provided.</p>\n *\n * @param query - The gremlin query.\n *\n * @param parameters - An associative array containing the key and values of the parameters.\n *\n * @param options - The graph query options.\n *\n * @param callback - Function to execute when the response is retrieved, taking two arguments: <code>err</code> and <code>result</code>. When not defined, the method will return a promise.\n *\n * @example\n *\n * <caption>Promise-based API, using async/await</caption> const result = await client.executeGraph('g.V()'); // Get the first item (vertex, edge, scalar value, ...) const vertex = result.first(); console.log(vertex.label);\n *\n * @example\n *\n * <caption>Callback-based API</caption> client.executeGraph('g.V()', (err, result) => { const vertex = result.first(); console.log(vertex.label); });\n *\n * @example\n *\n * <caption>Iterating through the results</caption> const result = await client.executeGraph('g.E()'); for (let edge of result) { console.log(edge.label); // created });\n *\n * @example\n *\n * <caption>Using result.forEach()</caption> const result = await client.executeGraph('g.V().hasLabel(\"person\")'); result.forEach(function(vertex) { console.log(vertex.type); // vertex console.log(vertex.label); // person });\n *\n * @see\n *\n * {@link ExecutionProfile} to reuse a set of options across different query executions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeGraph(traversal: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", parameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [name: string]: any;\n    } | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "GraphQueryOptions",
                  "canonicalReference": "cassandra-driver!~GraphQueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GraphResultSet",
                  "canonicalReference": "cassandra-driver!~GraphResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "traversal",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "parameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "executeGraph"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#executeGraph:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeGraph(traversal: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", parameters: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [name: string]: any;\n    } | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GraphResultSet",
                  "canonicalReference": "cassandra-driver!~GraphResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "traversal",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "parameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "executeGraph"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#executeGraph:member(3)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeGraph(traversal: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueCallback",
                  "canonicalReference": "cassandra-driver!~ValueCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GraphResultSet",
                  "canonicalReference": "cassandra-driver!~GraphResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "traversal",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "executeGraph"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#executeGraph:member(4)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeGraph(traversal: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", parameters?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [name: string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "GraphQueryOptions",
                  "canonicalReference": "cassandra-driver!~GraphQueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "GraphResultSet",
                  "canonicalReference": "cassandra-driver!~GraphResultSet:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "traversal",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "parameters",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "executeGraph"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#getReplicas:member(1)",
              "docComment": "/**\n * Gets the host that are replicas of a given token.\n *\n * @param keyspace - \n *\n * @param token - \n *\n * @returns {Array<Host>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getReplicas(keyspace: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", token: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Host",
                  "canonicalReference": "cassandra-driver!~Host:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "keyspace",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "token",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "getReplicas"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#getState:member(1)",
              "docComment": "/**\n * Gets a snapshot containing information on the connections pools held by this Client at the current time. <p> The information provided in the returned object only represents the state at the moment this method was called and it's not maintained in sync with the driver metadata. </p>\n *\n * @returns {ClientState} A [ClientState]{@linkcode module:metadata~ClientState} instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getState(): "
                },
                {
                  "kind": "Reference",
                  "text": "ClientState",
                  "canonicalReference": "cassandra-driver!~ClientState:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getState"
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!Client#hosts:member",
              "docComment": "/**\n * Gets an associative array of cluster hosts.  @type {HostMap}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hosts: "
                },
                {
                  "kind": "Reference",
                  "text": "HostMap",
                  "canonicalReference": "cassandra-driver!~HostMap:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hosts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!Client#keyspace:member",
              "docComment": "/**\n * Gets the name of the active keyspace.  @type {String}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyspace: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "keyspace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!Client#metadata:member",
              "docComment": "/**\n * Gets the schema and cluster metadata information.  @type {Metadata}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metadata: "
                },
                {
                  "kind": "Reference",
                  "text": "Metadata",
                  "canonicalReference": "cassandra-driver!~Metadata:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metadata",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!Client#metrics:member",
              "docComment": "/**\n * The [ClientMetrics]{@link module:metrics~ClientMetrics} instance used to expose measurements of its internal behavior and of the server as seen from the driver side. <p>By default, a [DefaultMetrics]{@link module:metrics~DefaultMetrics} instance is used.</p>  @type {ClientMetrics}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metrics: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientMetrics",
                  "canonicalReference": "cassandra-driver!~ClientMetrics:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "metrics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#shutdown:member(1)",
              "docComment": "/**\n * Closes all connections to all hosts. <p>It returns a <code>Promise</code> when a <code>callback</code> is not provided.</p>\n *\n * @param callback - Optional callback to be invoked when finished closing all connections.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shutdown(callback?: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "shutdown"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!Client#stream:member(1)",
              "docComment": "/**\n * Executes the query and pushes the rows to the result stream as soon as they received. <p> The stream is a [ReadableStream]{@linkcode https://nodejs.org/api/stream.html#stream_class_stream_readable} object that emits rows. It can be piped downstream and provides automatic pause/resume logic (it buffers when not read). </p> <p> The query can be prepared (recommended) or not depending on {@link QueryOptions}.prepare flag. Retries on multiple hosts if needed. </p>\n *\n * @param query - The query to prepare and execute.\n *\n * @param params - Array of parameter values or an associative array (object) containing parameter names as keys and its value\n *\n * @param options - The query options.\n *\n * @param callback - executes callback(err) after all rows have been received or if there is an error\n *\n * @returns {ResultStream}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stream(query: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", params?: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayOrObject",
                  "canonicalReference": "cassandra-driver!~ArrayOrObject:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback?: "
                },
                {
                  "kind": "Reference",
                  "text": "EmptyCallback",
                  "canonicalReference": "cassandra-driver!~EmptyCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ResultStream",
                  "canonicalReference": "cassandra-driver!~ResultStream:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "isAbstract": false,
              "name": "stream"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "cassandra-driver!ClientOptions:interface",
          "docComment": "/**\n * Client options. <p>While the driver provides lots of extensibility points and configurability, few client options are required.</p> <p>Default values for all settings are designed to be suitable for the majority of use cases, you should avoid fine tuning it when not needed.</p> <p>See [Client constructor]{@link Client} documentation for recommended options.</p>  @typedef {Object} ClientOptions  @property {Array.<string>} contactPoints Array of addresses or host names of the nodes to add as contact points. <p> Contact points are addresses of Cassandra nodes that the driver uses to discover the cluster topology. </p> <p> Only one contact point is required (the driver will retrieve the address of the other nodes automatically), but it is usually a good idea to provide more than one contact point, because if that single contact point is unavailable, the driver will not be able to initialize correctly. </p>  @property {String} [localDataCenter] The local data center to use. <p> If using DCAwareRoundRobinPolicy (default), this option is required and only hosts from this data center are connected to and used in query plans. </p>  @property {String} [keyspace] The logged keyspace for all the connections created within the {@link Client} instance.  @property {Object} [credentials] An object containing the username and password for plain-text authentication. It configures the authentication provider to be used against Apache Cassandra's PasswordAuthenticator or DSE's DseAuthenticator, when default auth scheme is plain-text. <p> Note that you should configure either <code>credentials</code> or <code>authProvider</code> to connect to an auth-enabled cluster, but not both. </p>  @property {String} [credentials.username] The username to use for plain-text authentication.  @property {String} [credentials.password] The password to use for plain-text authentication.  @property {Uuid} [id] A unique identifier assigned to a {@link Client} object, that will be communicated to the server (DSE 6.0+) to identify the client instance created with this options. When not defined, the driver will generate a random identifier.  @property {String} [applicationName] An optional setting identifying the name of the application using the {@link Client} instance. <p>This value is passed to DSE and is useful as metadata for describing a client connection on the server side.</p>  @property {String} [applicationVersion] An optional setting identifying the version of the application using the {@link Client} instance. <p>This value is passed to DSE and is useful as metadata for describing a client connection on the server side.</p>  @property {Object} [monitorReporting] Options for reporting mechanism from the client to the DSE server, for versions that support it.  @property {Boolean} [monitorReporting.enabled=true] Determines whether the reporting mechanism is enabled. Defaults to <code>true</code>.  @property {Object} [cloud] The options to connect to a cloud instance.  @property {String|URL} cloud.secureConnectBundle Determines the file path for the credentials file bundle.  @property {Number} [refreshSchemaDelay] The default window size in milliseconds used to debounce node list and schema refresh metadata requests. Default: 1000.  @property {Boolean} [isMetadataSyncEnabled] Determines whether client-side schema metadata retrieval and update is enabled. <p>Setting this value to <code>false</code> will cause keyspace information not to be automatically loaded, affecting replica calculation per token in the different keyspaces. When disabling metadata synchronization, use [Metadata.refreshKeyspaces()]{@link module:metadata~Metadata#refreshKeyspaces} to keep keyspace information up to date or token-awareness will not work correctly.</p> Default: <code>true</code>.  @property {Boolean} [prepareOnAllHosts] Determines if the driver should prepare queries on all hosts in the cluster. Default: <code>true</code>.  @property {Boolean} [rePrepareOnUp] Determines if the driver should re-prepare all cached prepared queries on a host when it marks it back up. Default: <code>true</code>.  @property {Number} [maxPrepared] Determines the maximum amount of different prepared queries before evicting items from the internal cache. Reaching a high threshold hints that the queries are not being reused, like when hard-coding parameter values inside the queries. Default: <code>500</code>.  @property {Object} [policies]  @property {LoadBalancingPolicy} [policies.loadBalancing] The load balancing policy instance to be used to determine the coordinator per query.  @property {RetryPolicy} [policies.retry] The retry policy.  @property {ReconnectionPolicy} [policies.reconnection] The reconnection policy to be used.  @property {AddressTranslator} [policies.addressResolution] The address resolution policy.  @property {SpeculativeExecutionPolicy} [policies.speculativeExecution] The <code>SpeculativeExecutionPolicy</code> instance to be used to determine if the client should send speculative queries when the selected host takes more time than expected. <p> Default: <code>[NoSpeculativeExecutionPolicy]{@link module:policies/speculativeExecution~NoSpeculativeExecutionPolicy}</code> </p>  @property {TimestampGenerator} [policies.timestampGeneration] The client-side [query timestamp generator]{@link module:policies/timestampGeneration~TimestampGenerator}. <p> Default: <code>[MonotonicTimestampGenerator]{@link module:policies/timestampGeneration~MonotonicTimestampGenerator} </code> </p> <p>Use <code>null</code> to disable client-side timestamp generation.</p>  @property {QueryOptions} [queryOptions] Default options for all queries.  @property {Object} [pooling] Pooling options.  @property {Number} [pooling.heartBeatInterval] The amount of idle time in milliseconds that has to pass before the driver issues a request on an active connection to avoid idle time disconnections. Default: 30000.  @property {Object} [pooling.coreConnectionsPerHost] Associative array containing amount of connections per host distance.  @property {Number} [pooling.maxRequestsPerConnection] The maximum number of requests per connection. The default value is: <ul> <li>For modern protocol versions (v3 and above): 2048</li> <li>For older protocol versions (v1 and v2): 128</li> </ul>  @property {Boolean} [pooling.warmup] Determines if all connections to hosts in the local datacenter must be opened on connect. Default: true.  @property {Object} [protocolOptions]  @property {Number} [protocolOptions.port] The port to use to connect to the Cassandra host. If not set through this method, the default port (9042) will be used instead.  @property {Number} [protocolOptions.maxSchemaAgreementWaitSeconds] The maximum time in seconds to wait for schema agreement between nodes before returning from a DDL query. Default: 10.  @property {Number} [protocolOptions.maxVersion] When set, it limits the maximum protocol version used to connect to the nodes. Useful for using the driver against a cluster that contains nodes with different major/minor versions of Cassandra.  @property {Boolean} [protocolOptions.noCompact] When set to true, enables the NO_COMPACT startup option. <p> When this option is supplied <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>BATCH</code> statements on <code>COMPACT STORAGE</code> tables function in \"compatibility\" mode which allows seeing these tables as if they were \"regular\" CQL tables. </p> <p> This option only effects interactions with interactions with tables using <code>COMPACT STORAGE</code> and is only supported by C* 3.0.16+, 3.11.2+, 4.0+ and DSE 6.0+. </p>  @property {Object} [socketOptions]  @property {Number} [socketOptions.connectTimeout] Connection timeout in milliseconds. Default: 5000.  @property {Number} [socketOptions.defunctReadTimeoutThreshold] Determines the amount of requests that simultaneously have to timeout before closing the connection. Default: 64.  @property {Boolean} [socketOptions.keepAlive] Whether to enable TCP keep-alive on the socket. Default: true.  @property {Number} [socketOptions.keepAliveDelay] TCP keep-alive delay in milliseconds. Default: 0.  @property {Number} [socketOptions.readTimeout] Per-host read timeout in milliseconds. <p> Please note that this is not the maximum time a call to {@link Client#execute} may have to wait; this is the maximum time that call will wait for one particular Cassandra host, but other hosts will be tried if one of them timeout. In other words, a {@link Client#execute} call may theoretically wait up to <code>readTimeout * number_of_cassandra_hosts</code> (though the total number of hosts tried for a given query also depends on the LoadBalancingPolicy in use). <p>When setting this value, keep in mind the following:</p> <ul> <li>the timeout settings used on the Cassandra side (*_request_timeout_in_ms in cassandra.yaml) should be taken into account when picking a value for this read timeout. You should pick a value a couple of seconds greater than the Cassandra timeout settings. </li> <li> the read timeout is only approximate and only control the timeout to one Cassandra host, not the full query. </li> </ul> Setting a value of 0 disables read timeouts. Default: <code>12000</code>.  @property {Boolean} [socketOptions.tcpNoDelay] When set to true, it disables the Nagle algorithm. Default: true.  @property {Number} [socketOptions.coalescingThreshold] Buffer length in bytes use by the write queue before flushing the frames. Default: 8000.  @property {AuthProvider} [authProvider] Provider to be used to authenticate to an auth-enabled cluster.  @property {RequestTracker} [requestTracker] The instance of RequestTracker used to monitor or log requests executed with this instance.  @property {Object} [sslOptions] Client-to-node ssl options. When set the driver will use the secure layer. You can specify cert, ca, ... options named after the Node.js <code>tls.connect()</code> options. <p> It uses the same default values as Node.js <code>tls.connect()</code> except for <code>rejectUnauthorized</code> which is set to <code>false</code> by default (for historical reasons). This setting is likely to change in upcoming versions to enable validation by default. </p>  @property {Object} [encoding] Encoding options.  @property {Function} [encoding.map] Map constructor to use for Cassandra map<k,v> type encoding and decoding. If not set, it will default to Javascript Object with map keys as property names.  @property {Function} [encoding.set] Set constructor to use for Cassandra set<k> type encoding and decoding. If not set, it will default to Javascript Array.  @property {Boolean} [encoding.copyBuffer] Determines if the network buffer should be copied for buffer based data types (blob, uuid, timeuuid and inet). <p> Setting it to true will cause that the network buffer is copied for each row value of those types, causing additional allocations but freeing the network buffer to be reused. Setting it to true is a good choice for cases where the Row and ResultSet returned by the queries are long-lived objects. </p> <p> Setting it to false will cause less overhead and the reference of the network buffer to be maintained until the row / result set are de-referenced. Default: true. </p>  @property {Boolean} [encoding.useUndefinedAsUnset] Valid for Cassandra 2.2 and above. Determines that, if a parameter is set to <code>undefined</code> it should be encoded as <code>unset</code>. <p> By default, ECMAScript <code>undefined</code> is encoded as <code>null</code> in the driver. Cassandra 2.2 introduced the concept of unset. At driver level, you can set a parameter to unset using the field <code>types.unset</code>. Setting this flag to true allows you to use ECMAScript undefined as Cassandra <code>unset</code>. </p> <p> Default: true. </p>  @property {Boolean} [encoding.useBigIntAsLong] Use [BigInt ECMAScript type](https://tc39.github.io/proposal-bigint/) to represent CQL bigint and counter data types.  @property {Boolean} [encoding.useBigIntAsVarint] Use [BigInt ECMAScript type](https://tc39.github.io/proposal-bigint/) to represent CQL varint data type.  @property {Array.<ExecutionProfile>} [profiles] The array of [execution profiles]{@link ExecutionProfile}.  @property {Function} [promiseFactory] Function to be used to create a <code>Promise</code> from a callback-style function. <p> Promise libraries often provide different methods to create a promise. For example, you can use Bluebird's <code>Promise.fromCallback()</code> method. </p> <p> By default, the driver will use the [Promise constructor]{@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise}. </p>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface ClientOptions "
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "releaseTag": "Public",
          "name": "ClientOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#authProvider:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "AuthProvider",
                  "canonicalReference": "cassandra-driver!~AuthProvider:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "authProvider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#cloud:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cloud?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        secureConnectBundle: string | "
                },
                {
                  "kind": "Reference",
                  "text": "URL",
                  "canonicalReference": "!\"\\\"url\\\"\".__global.URL:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "cloud",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#contactPoints:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contactPoints?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contactPoints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#credentials:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "credentials?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        username: string;\n        password: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "credentials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#encoding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        map?: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        set?: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        copyBuffer?: boolean;\n        useUndefinedAsUnset?: boolean;\n        useBigIntAsLong?: boolean;\n        useBigIntAsVarint?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#isMetadataSyncEnabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMetadataSyncEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isMetadataSyncEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#keyspace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyspace?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyspace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#maxPrepared:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxPrepared?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "maxPrepared",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#metrics:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metrics?: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientMetrics",
                  "canonicalReference": "cassandra-driver!~ClientMetrics:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "metrics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#policies:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "policies?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        addressResolution?: "
                },
                {
                  "kind": "Reference",
                  "text": "AddressTranslator",
                  "canonicalReference": "cassandra-driver!~AddressTranslator:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        loadBalancing?: "
                },
                {
                  "kind": "Reference",
                  "text": "LoadBalancingPolicy",
                  "canonicalReference": "cassandra-driver!~LoadBalancingPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        reconnection?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReconnectionPolicy",
                  "canonicalReference": "cassandra-driver!~ReconnectionPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        retry?: "
                },
                {
                  "kind": "Reference",
                  "text": "RetryPolicy",
                  "canonicalReference": "cassandra-driver!~RetryPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        speculativeExecution?: "
                },
                {
                  "kind": "Reference",
                  "text": "SpeculativeExecutionPolicy",
                  "canonicalReference": "cassandra-driver!~SpeculativeExecutionPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        timestampGeneration?: "
                },
                {
                  "kind": "Reference",
                  "text": "TimestampGenerator",
                  "canonicalReference": "cassandra-driver!~TimestampGenerator:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "policies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 14
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#pooling:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pooling?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        coreConnectionsPerHost?: {\n            [key: number]: number;\n        };\n        heartBeatInterval?: number;\n        maxRequestsPerConnection?: number;\n        warmup?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pooling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#prepareOnAllHosts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prepareOnAllHosts?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prepareOnAllHosts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#profiles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "profiles?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExecutionProfile",
                  "canonicalReference": "cassandra-driver!ExecutionProfile:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "profiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#promiseFactory:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "promiseFactory?: "
                },
                {
                  "kind": "Content",
                  "text": "(handler: (callback: (err: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ", result?: any) => void) => void) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "promiseFactory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#protocolOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protocolOptions?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        maxSchemaAgreementWaitSeconds?: number;\n        maxVersion?: number;\n        noCompact?: boolean;\n        port?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "protocolOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#queryOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "queryOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "queryOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#refreshSchemaDelay:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refreshSchemaDelay?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "refreshSchemaDelay",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#rePrepareOnUp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rePrepareOnUp?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "rePrepareOnUp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#requestTracker:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestTracker?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestTracker",
                  "canonicalReference": "cassandra-driver!~RequestTracker:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "requestTracker",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#socketOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "socketOptions?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        coalescingThreshold?: number;\n        connectTimeout?: number;\n        defunctReadTimeoutThreshold?: number;\n        keepAlive?: boolean;\n        keepAliveDelay?: number;\n        readTimeout?: number;\n        tcpNoDelay?: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "socketOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!ClientOptions#sslOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sslOptions?: "
                },
                {
                  "kind": "Reference",
                  "text": "ConnectionOptions",
                  "canonicalReference": "!\"\\\"tls\\\"\".ConnectionOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sslOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!concurrent:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$2: "
            },
            {
              "kind": "Content",
              "text": "{\n    executeConcurrent: typeof "
            },
            {
              "kind": "Reference",
              "text": "executeConcurrent",
              "canonicalReference": "cassandra-driver!~executeConcurrent:function"
            },
            {
              "kind": "Content",
              "text": ";\n    ResultSetGroup: typeof "
            },
            {
              "kind": "Reference",
              "text": "ResultSetGroup",
              "canonicalReference": "cassandra-driver!~ResultSetGroup:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "concurrent",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!datastax:var",
          "docComment": "/**\n * DataStax module. <p> Contains modules and classes to represent functionality that is specific to DataStax products. </p>  @module datastax\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default: "
            },
            {
              "kind": "Content",
              "text": "{\n    graph: {\n        Edge: typeof "
            },
            {
              "kind": "Reference",
              "text": "Edge",
              "canonicalReference": "cassandra-driver!~Edge:class"
            },
            {
              "kind": "Content",
              "text": ";\n        Element: typeof "
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "cassandra-driver!~Element:class"
            },
            {
              "kind": "Content",
              "text": ";\n        Path: typeof "
            },
            {
              "kind": "Reference",
              "text": "Path",
              "canonicalReference": "cassandra-driver!~Path:class"
            },
            {
              "kind": "Content",
              "text": ";\n        Property: typeof "
            },
            {
              "kind": "Reference",
              "text": "Property",
              "canonicalReference": "cassandra-driver!~Property:class"
            },
            {
              "kind": "Content",
              "text": ";\n        Vertex: typeof "
            },
            {
              "kind": "Reference",
              "text": "Vertex",
              "canonicalReference": "cassandra-driver!~Vertex:class"
            },
            {
              "kind": "Content",
              "text": ";\n        VertexProperty: typeof "
            },
            {
              "kind": "Reference",
              "text": "VertexProperty",
              "canonicalReference": "cassandra-driver!~VertexProperty:class"
            },
            {
              "kind": "Content",
              "text": ";\n        asInt: typeof "
            },
            {
              "kind": "Reference",
              "text": "asInt",
              "canonicalReference": "cassandra-driver!~asInt:function"
            },
            {
              "kind": "Content",
              "text": ";\n        asDouble: typeof "
            },
            {
              "kind": "Reference",
              "text": "asDouble",
              "canonicalReference": "cassandra-driver!~asDouble:function"
            },
            {
              "kind": "Content",
              "text": ";\n        asFloat: typeof "
            },
            {
              "kind": "Reference",
              "text": "asFloat",
              "canonicalReference": "cassandra-driver!~asFloat:function"
            },
            {
              "kind": "Content",
              "text": ";\n        asTimestamp: typeof "
            },
            {
              "kind": "Reference",
              "text": "asTimestamp",
              "canonicalReference": "cassandra-driver!~asTimestamp:function"
            },
            {
              "kind": "Content",
              "text": ";\n        asUdt: typeof "
            },
            {
              "kind": "Reference",
              "text": "asUdt",
              "canonicalReference": "cassandra-driver!~asUdt:function"
            },
            {
              "kind": "Content",
              "text": ";\n        direction: {\n            both: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n            in: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n            out: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n            in_: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n        };\n        getCustomTypeSerializers: typeof "
            },
            {
              "kind": "Reference",
              "text": "getCustomSerializers",
              "canonicalReference": "cassandra-driver!~getCustomSerializers:function"
            },
            {
              "kind": "Content",
              "text": ";\n        GraphResultSet: typeof "
            },
            {
              "kind": "Reference",
              "text": "GraphResultSet",
              "canonicalReference": "cassandra-driver!~GraphResultSet:class"
            },
            {
              "kind": "Content",
              "text": ";\n        GraphTypeWrapper: typeof "
            },
            {
              "kind": "Reference",
              "text": "GraphTypeWrapper",
              "canonicalReference": "cassandra-driver!~GraphTypeWrapper:class"
            },
            {
              "kind": "Content",
              "text": ";\n        t: {\n            id: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n            key: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n            label: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n            value: {\n                typeName: any;\n                elementName: any;\n                toString(): any;\n            };\n        };\n        UdtGraphWrapper: typeof "
            },
            {
              "kind": "Reference",
              "text": "UdtGraphWrapper",
              "canonicalReference": "cassandra-driver!~UdtGraphWrapper:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    DateRange: typeof "
            },
            {
              "kind": "Reference",
              "text": "DateRange",
              "canonicalReference": "cassandra-driver!~DateRange:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "datastax",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 34
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "cassandra-driver!defaultOptions:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "defaultOptions: () => "
            },
            {
              "kind": "Reference",
              "text": "ClientOptions",
              "canonicalReference": "cassandra-driver!ClientOptions:interface"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "defaultOptions"
        },
        {
          "kind": "Class",
          "canonicalReference": "cassandra-driver!Encoder:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class Encoder "
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "Encoder",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "cassandra-driver!Encoder:constructor(1)",
              "docComment": "/**\n * Serializes and deserializes to and from a CQL type and a Javascript Type.\n *\n * @param protocolVersion - \n *\n * @param options -  @constructor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(protocolVersion: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "ClientOptions",
                  "canonicalReference": "cassandra-driver!ClientOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "protocolVersion",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!Encoder#decode:member",
              "docComment": "/**\n * Decodes Cassandra bytes into Javascript values. <p> This is part of an <b>experimental</b> API, this can be changed future releases. </p>\n *\n * @param buffer - Raw buffer to be decoded.\n *\n * @param type - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decode: "
                },
                {
                  "kind": "Content",
                  "text": "(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Reference",
                  "text": "DataTypeInfo",
                  "canonicalReference": "cassandra-driver!~DataTypeInfo:type"
                },
                {
                  "kind": "Content",
                  "text": ") => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "decode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!Encoder#encode:member",
              "docComment": "/**\n * Encodes Javascript types into Buffer according to the Cassandra protocol. <p> This is part of an <b>experimental</b> API, this can be changed future releases. </p>\n *\n * @param value - The value to be converted.\n *\n * @param typeInfo - The type information. <p>It can be either a:</p> <ul> <li>A <code>String</code> representing the data type.</li> <li>A <code>Number</code> with one of the values of {@link module:types~dataTypes dataTypes}.</li> <li>An <code>Object</code> containing the <code>type.code</code> as one of the values of {@link module:types~dataTypes dataTypes} and <code>type.info</code>. </li> </ul>\n *\n * @returns {Buffer}\n *\n * @throws\n *\n * {TypeError} When there is an encoding error\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encode: "
                },
                {
                  "kind": "Content",
                  "text": "(value: any, typeInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "DataTypeInfo",
                  "canonicalReference": "cassandra-driver!~DataTypeInfo:type"
                },
                {
                  "kind": "Content",
                  "text": " | number | string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "encode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!Encoder#protocolVersion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protocolVersion: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "protocolVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!errors:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$9: "
            },
            {
              "kind": "Content",
              "text": "{\n    ArgumentError: typeof "
            },
            {
              "kind": "Reference",
              "text": "ArgumentError",
              "canonicalReference": "cassandra-driver!~ArgumentError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    AuthenticationError: typeof "
            },
            {
              "kind": "Reference",
              "text": "AuthenticationError",
              "canonicalReference": "cassandra-driver!~AuthenticationError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    BusyConnectionError: typeof "
            },
            {
              "kind": "Reference",
              "text": "BusyConnectionError",
              "canonicalReference": "cassandra-driver!~BusyConnectionError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    DriverError: typeof "
            },
            {
              "kind": "Reference",
              "text": "DriverError",
              "canonicalReference": "cassandra-driver!~DriverError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    OperationTimedOutError: typeof "
            },
            {
              "kind": "Reference",
              "text": "OperationTimedOutError",
              "canonicalReference": "cassandra-driver!~OperationTimedOutError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    DriverInternalError: typeof "
            },
            {
              "kind": "Reference",
              "text": "DriverInternalError",
              "canonicalReference": "cassandra-driver!~DriverInternalError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    NoHostAvailableError: typeof "
            },
            {
              "kind": "Reference",
              "text": "NoHostAvailableError",
              "canonicalReference": "cassandra-driver!~NoHostAvailableError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    NotSupportedError: typeof "
            },
            {
              "kind": "Reference",
              "text": "NotSupportedError",
              "canonicalReference": "cassandra-driver!~NotSupportedError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    ResponseError: typeof "
            },
            {
              "kind": "Reference",
              "text": "ResponseError",
              "canonicalReference": "cassandra-driver!~ResponseError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    VIntOutOfRangeException: typeof "
            },
            {
              "kind": "Reference",
              "text": "VIntOutOfRangeException",
              "canonicalReference": "cassandra-driver!~VIntOutOfRangeException:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "errors",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 22
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "cassandra-driver!ExecutionOptions:class",
          "docComment": "/**\n * A base class that represents a wrapper around the user provided query options with getter methods and proper default values. <p> Note that getter methods might return <code>undefined</code> when not set on the query options or default {@link Client} options. </p>\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ExecutionOptions "
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ExecutionOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "cassandra-driver!ExecutionOptions:constructor(1)",
              "docComment": "/**\n * Creates a new instance of {@link ExecutionOptions}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getCaptureStackTrace:member(1)",
              "docComment": "/**\n * Determines if the stack trace before the query execution should be maintained.  @abstract\n *\n * @returns {Boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCaptureStackTrace(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getCaptureStackTrace"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getConsistency:member(1)",
              "docComment": "/**\n * Gets the [Consistency level]{@link module:types~consistencies} to be used for the execution.  @abstract\n *\n * @returns {Number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getConsistency(): "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getConsistency"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getCustomPayload:member(1)",
              "docComment": "/**\n * Key-value payload to be passed to the server. On the server side, implementations of QueryHandler can use this data.  @abstract\n *\n * @returns {{ [key: string]: any }}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCustomPayload(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getCustomPayload"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getFetchSize:member(1)",
              "docComment": "/**\n * Gets the amount of rows to retrieve per page.  @abstract\n *\n * @returns {Number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFetchSize(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getFetchSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getFixedHost:member(1)",
              "docComment": "/**\n * When a fixed host is set on the query options and the query plan for the load-balancing policy is not used, it gets the host that should handle the query.\n *\n * @returns {Host}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFixedHost(): "
                },
                {
                  "kind": "Reference",
                  "text": "Host",
                  "canonicalReference": "cassandra-driver!~Host:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getFixedHost"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getHints:member(1)",
              "docComment": "/**\n * Gets the type hints for parameters given in the query, ordered as for the parameters.  @abstract\n *\n * @returns {string[] | string[][]}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHints(): "
                },
                {
                  "kind": "Content",
                  "text": "string[] | string[][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getHints"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getKeyspace:member(1)",
              "docComment": "/**\n * Gets the keyspace for the query when set at query options level. <p> Note that this method will return <code>undefined</code> when the keyspace is not set at query options level. It will only return the keyspace name when the user provided a different keyspace than the current {@link Client} keyspace. </p>  @abstract\n *\n * @returns {String}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getKeyspace(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getKeyspace"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getLoadBalancingPolicy:member(1)",
              "docComment": "/**\n * Gets the load balancing policy used for this execution.\n *\n * @returns {LoadBalancingPolicy} A <code>LoadBalancingPolicy</code> instance, it can't be <code>undefined</code>.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLoadBalancingPolicy(): "
                },
                {
                  "kind": "Reference",
                  "text": "LoadBalancingPolicy",
                  "canonicalReference": "cassandra-driver!~LoadBalancingPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getLoadBalancingPolicy"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getPageState:member(1)",
              "docComment": "/**\n * Gets the Buffer representing the paging state.  @abstract\n *\n * @returns {Buffer}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPageState(): "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getPageState"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getRawQueryOptions:member(1)",
              "docComment": "/**\n * Gets the query options as provided to the execution method without setting the default values.\n *\n * @returns {QueryOptions}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRawQueryOptions(): "
                },
                {
                  "kind": "Reference",
                  "text": "QueryOptions",
                  "canonicalReference": "cassandra-driver!QueryOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getRawQueryOptions"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getReadTimeout:member(1)",
              "docComment": "/**\n * Gets the timeout in milliseconds to be used for the execution per coordinator. <p> A value of <code>0</code> disables client side read timeout for the execution. Default: <code>undefined</code>. </p>  @abstract\n *\n * @returns {Number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getReadTimeout(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getReadTimeout"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getRetryPolicy:member(1)",
              "docComment": "/**\n * Gets the [retry policy]{@link module:policies/retry} to be used.  @abstract\n *\n * @returns {RetryPolicy} A <code>RetryPolicy</code> instance, it can't be <code>undefined</code>.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRetryPolicy(): "
                },
                {
                  "kind": "Reference",
                  "text": "RetryPolicy",
                  "canonicalReference": "cassandra-driver!~RetryPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getRetryPolicy"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getRoutingKey:member(1)",
              "docComment": "/**\n * Gets the partition key(s) to determine which coordinator should be used for the query.  @abstract\n *\n * @returns {Buffer|Array<Buffer>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRoutingKey(): "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getRoutingKey"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getSerialConsistency:member(1)",
              "docComment": "/**\n * Gets the the consistency level to be used for the serial phase of conditional updates.  @abstract\n *\n * @returns {consistencies}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSerialConsistency(): "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getSerialConsistency"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#getTimestamp:member(1)",
              "docComment": "/**\n * Gets the provided timestamp for the execution in microseconds from the unix epoch (00:00:00, January 1st, 1970). <p>When a timestamp generator is used, this method returns <code>undefined</code>.</p>  @abstract\n *\n * @returns {Number|Long|undefined|null}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTimestamp(): "
                },
                {
                  "kind": "Content",
                  "text": "number | "
                },
                {
                  "kind": "Reference",
                  "text": "Long",
                  "canonicalReference": "long!Long:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "getTimestamp"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#isAutoPage:member(1)",
              "docComment": "/**\n * Determines whether the driver must retrieve the following result pages automatically. <p> This setting is only considered by the [Client#eachRow()]{@link Client#eachRow} method. </p>  @abstract\n *\n * @returns {Boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isAutoPage(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isAutoPage"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#isBatchCounter:member(1)",
              "docComment": "/**\n * Determines whether its a counter batch. Only valid for [Client#batch()]{@link Client#batch}, it will be ignored by other methods.  @abstract\n *\n * @returns {Boolean} A <code>Boolean</code> value, it can't be <code>undefined</code>.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBatchCounter(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isBatchCounter"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#isBatchLogged:member(1)",
              "docComment": "/**\n * Determines whether the batch should be written to the batchlog. Only valid for [Client#batch()]{@link Client#batch}, it will be ignored by other methods.  @abstract\n *\n * @returns {Boolean} A <code>Boolean</code> value, it can't be <code>undefined</code>.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBatchLogged(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isBatchLogged"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#isIdempotent:member(1)",
              "docComment": "/**\n * Determines whether the query can be applied multiple times without changing the result beyond the initial application.  @abstract\n *\n * @returns {Boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isIdempotent(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isIdempotent"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#isPrepared:member(1)",
              "docComment": "/**\n * Determines whether the query must be prepared beforehand.  @abstract\n *\n * @returns {Boolean} A <code>Boolean</code> value, it can't be <code>undefined</code>.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isPrepared(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isPrepared"
            },
            {
              "kind": "Method",
              "canonicalReference": "cassandra-driver!ExecutionOptions#isQueryTracing:member(1)",
              "docComment": "/**\n * Determines whether query tracing is enabled for the execution.  @abstract\n *\n * @returns {Boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isQueryTracing(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "isAbstract": false,
              "name": "isQueryTracing"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "cassandra-driver!ExecutionProfile:class",
          "docComment": "/**\n * @classdesc Represents a set configurations to be used in a statement execution to be used for a single {@link Client} instance. <p> An {@link ExecutionProfile} instance should not be shared across different {@link Client} instances. </p>\n *\n * @example\n *\n * const { Client, ExecutionProfile } = require('cassandra-driver'); const client = new Client({ contactPoints: ['host1', 'host2'], profiles: [ new ExecutionProfile('metrics-oltp', { consistency: consistency.localQuorum, retry: myRetryPolicy }) ] });\n *\n * client.execute(query, params, { executionProfile: 'metrics-oltp' }, callback);\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "declare class ExecutionProfile "
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "releaseTag": "Public",
          "isAbstract": false,
          "name": "ExecutionProfile",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "cassandra-driver!ExecutionProfile:constructor(1)",
              "docComment": "/**\n * Creates a new instance of {@link ExecutionProfile}. Represents a set configurations to be used in a statement execution to be used for a single {@link Client} instance. <p> An {@link ExecutionProfile} instance should not be shared across different {@link Client} instances. </p>\n *\n * @param name - Name of the execution profile. <p> Use <code>'default'</code> to specify that the new instance should be the default {@link ExecutionProfile} if no profile is specified in the execution. </p>\n *\n * @param options - Profile options, when any of the options is not specified the {@link Client} will the use the ones defined in the default profile.\n *\n * @param  - {Number} [options.consistency] The consistency level to use for this profile.\n *\n * @param  - {LoadBalancingPolicy} [options.loadBalancing] The load-balancing policy to use for this profile.\n *\n * @param  - {Number} [options.readTimeout] The client per-host request timeout to use for this profile.\n *\n * @param  - {RetryPolicy} [options.retry] The retry policy to use for this profile.\n *\n * @param  - {Number} [options.serialConsistency] The serial consistency level to use for this profile.\n *\n * @param  - {Object} [options.graphOptions]\n *\n * @param  - {String} [options.graphOptions.language] The graph language to use for graph queries. <p> Note that this setting should normally be <code>undefined</code> or set by a utility method and it's not expected to be defined manually by the user. </p>\n *\n * @param  - {String} [options.graphOptions.results] The protocol to use for serializing and deserializing graph results. <p> Note that this setting should normally be <code>undefined</code> or set by a utility method and it's not expected to be defined manually by the user. </p>\n *\n * @param  - {String} [options.graphOptions.name] The graph name to use for graph queries.\n *\n * @param  - {Number} [options.graphOptions.readConsistency] The consistency level to use for graph read queries.\n *\n * @param  - {String} [options.graphOptions.source] The graph traversal source name to use for graph queries.\n *\n * @param  - {Number} [options.graphOptions.writeConsistency] The consistency level to use for graph write queries.\n *\n * @param  - {LoadBalancingPolicy} [options.loadBalancing] The load-balancing policy to use for this profile.\n *\n * @param  - {Number} [options.readTimeout] The client per-host request timeout to use for this profile.\n *\n * @param  - {RetryPolicy} [options.retry] The retry policy to use for this profile.\n *\n * @param  - {Number} [options.serialConsistency] The serial consistency level to use for this profile.\n *\n * @example\n *\n * const { Client, ExecutionProfile } = require('cassandra-driver'); const client = new Client({ contactPoints: ['host1', 'host2'], profiles: [ new ExecutionProfile('metrics-oltp', { consistency: consistency.localQuorum, retry: myRetryPolicy }) ] });\n *\n * client.execute(query, params, { executionProfile: 'metrics-oltp' }, callback);  @constructor\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        consistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n        loadBalancing?: "
                },
                {
                  "kind": "Reference",
                  "text": "LoadBalancingPolicy",
                  "canonicalReference": "cassandra-driver!~LoadBalancingPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        readTimeout?: number;\n        retry?: "
                },
                {
                  "kind": "Reference",
                  "text": "RetryPolicy",
                  "canonicalReference": "cassandra-driver!~RetryPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        serialConsistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n        graphOptions?: {\n            name?: string;\n            language?: string;\n            source?: string;\n            readConsistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n            writeConsistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n        };\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 16
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!ExecutionProfile#consistency:member",
              "docComment": "/**\n * Consistency level.  @type {Number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "consistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "consistency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!ExecutionProfile#graphOptions:member",
              "docComment": "/**\n * The graph options for this profile.  @type {Object}  @property {String} language The graph language.  @property {String} name The graph name.  @property {String} readConsistency The consistency to use for graph write queries.  @property {String} source The graph traversal source.  @property {String} writeConsistency The consistency to use for graph write queries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "graphOptions?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        name?: string;\n        language?: string;\n        source?: string;\n        readConsistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n        writeConsistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";\n        results?: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "graphOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!ExecutionProfile#loadBalancing:member",
              "docComment": "/**\n * Load-balancing policy  @type {LoadBalancingPolicy}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadBalancing?: "
                },
                {
                  "kind": "Reference",
                  "text": "LoadBalancingPolicy",
                  "canonicalReference": "cassandra-driver!~LoadBalancingPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "loadBalancing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!ExecutionProfile#name:member",
              "docComment": "/**\n * Name of the execution profile.  @type {String}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!ExecutionProfile#readTimeout:member",
              "docComment": "/**\n * Client read timeout.  @type {Number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readTimeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "readTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!ExecutionProfile#retry:member",
              "docComment": "/**\n * Retry policy.  @type {RetryPolicy}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retry?: "
                },
                {
                  "kind": "Reference",
                  "text": "RetryPolicy",
                  "canonicalReference": "cassandra-driver!~RetryPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "retry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            },
            {
              "kind": "Property",
              "canonicalReference": "cassandra-driver!ExecutionProfile#serialConsistency:member",
              "docComment": "/**\n * Serial consistency level.  @type {Number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "serialConsistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "serialConsistency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false,
              "isAbstract": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!geometry:var",
          "docComment": "/**\n * Geometry module. <p> Contains the classes to represent the set of additional CQL types for geospatial data that come with DSE 5.0. </p>  @module geometry\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$1: "
            },
            {
              "kind": "Content",
              "text": "{\n    Point: typeof "
            },
            {
              "kind": "Reference",
              "text": "Point",
              "canonicalReference": "cassandra-driver!~Point:class"
            },
            {
              "kind": "Content",
              "text": ";\n    LineString: typeof "
            },
            {
              "kind": "Reference",
              "text": "LineString",
              "canonicalReference": "cassandra-driver!~LineString:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Polygon: typeof "
            },
            {
              "kind": "Reference",
              "text": "Polygon",
              "canonicalReference": "cassandra-driver!~Polygon:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Geometry: typeof "
            },
            {
              "kind": "Reference",
              "text": "Geometry",
              "canonicalReference": "cassandra-driver!~Geometry:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "geometry",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!mapping:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$3: "
            },
            {
              "kind": "Content",
              "text": "{\n    Mapper: typeof "
            },
            {
              "kind": "Reference",
              "text": "Mapper",
              "canonicalReference": "cassandra-driver!~Mapper:class"
            },
            {
              "kind": "Content",
              "text": ";\n    ModelMapper: typeof "
            },
            {
              "kind": "Reference",
              "text": "ModelMapper",
              "canonicalReference": "cassandra-driver!~ModelMapper:class"
            },
            {
              "kind": "Content",
              "text": ";\n    ModelBatchMapper: typeof "
            },
            {
              "kind": "Reference",
              "text": "ModelBatchMapper",
              "canonicalReference": "cassandra-driver!~ModelBatchMapper:class"
            },
            {
              "kind": "Content",
              "text": ";\n    ModelBatchItem: typeof "
            },
            {
              "kind": "Reference",
              "text": "ModelBatchItem",
              "canonicalReference": "cassandra-driver!~ModelBatchItem:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Result: typeof "
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "cassandra-driver!~Result:class"
            },
            {
              "kind": "Content",
              "text": ";\n    TableMappings: typeof "
            },
            {
              "kind": "Reference",
              "text": "TableMappings",
              "canonicalReference": "cassandra-driver!~TableMappings:class"
            },
            {
              "kind": "Content",
              "text": ";\n    DefaultTableMappings: typeof "
            },
            {
              "kind": "Reference",
              "text": "DefaultTableMappings",
              "canonicalReference": "cassandra-driver!~DefaultTableMappings:class"
            },
            {
              "kind": "Content",
              "text": ";\n    UnderscoreCqlToCamelCaseMappings: typeof "
            },
            {
              "kind": "Reference",
              "text": "UnderscoreCqlToCamelCaseMappings",
              "canonicalReference": "cassandra-driver!~UnderscoreCqlToCamelCaseMappings:class"
            },
            {
              "kind": "Content",
              "text": ";\n    q: {\n        in_: (arr: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryOperator",
              "canonicalReference": "cassandra-driver!~QueryOperator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        gt: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryOperator",
              "canonicalReference": "cassandra-driver!~QueryOperator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        gte: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryOperator",
              "canonicalReference": "cassandra-driver!~QueryOperator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        lt: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryOperator",
              "canonicalReference": "cassandra-driver!~QueryOperator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        lte: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryOperator",
              "canonicalReference": "cassandra-driver!~QueryOperator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        notEq: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryOperator",
              "canonicalReference": "cassandra-driver!~QueryOperator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        and: (condition1: any, condition2: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryOperator",
              "canonicalReference": "cassandra-driver!~QueryOperator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        incr: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryAssignment",
              "canonicalReference": "cassandra-driver!~QueryAssignment:class"
            },
            {
              "kind": "Content",
              "text": ";\n        decr: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryAssignment",
              "canonicalReference": "cassandra-driver!~QueryAssignment:class"
            },
            {
              "kind": "Content",
              "text": ";\n        append: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryAssignment",
              "canonicalReference": "cassandra-driver!~QueryAssignment:class"
            },
            {
              "kind": "Content",
              "text": ";\n        prepend: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryAssignment",
              "canonicalReference": "cassandra-driver!~QueryAssignment:class"
            },
            {
              "kind": "Content",
              "text": ";\n        remove: (value: any) => "
            },
            {
              "kind": "Reference",
              "text": "QueryAssignment",
              "canonicalReference": "cassandra-driver!~QueryAssignment:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "mapping",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 42
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!metadata:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "metadata: "
            },
            {
              "kind": "Content",
              "text": "{\n    Metadata: typeof "
            },
            {
              "kind": "Reference",
              "text": "Metadata",
              "canonicalReference": "cassandra-driver!~Metadata:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "metadata",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!metrics:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$5: "
            },
            {
              "kind": "Content",
              "text": "{\n    ClientMetrics: typeof "
            },
            {
              "kind": "Reference",
              "text": "ClientMetrics",
              "canonicalReference": "cassandra-driver!~ClientMetrics:class"
            },
            {
              "kind": "Content",
              "text": ";\n    DefaultMetrics: typeof "
            },
            {
              "kind": "Reference",
              "text": "DefaultMetrics",
              "canonicalReference": "cassandra-driver!~DefaultMetrics:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "metrics",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!policies:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$4: "
            },
            {
              "kind": "Content",
              "text": "{\n    addressResolution: {\n        AddressTranslator: typeof "
            },
            {
              "kind": "Reference",
              "text": "AddressTranslator",
              "canonicalReference": "cassandra-driver!~AddressTranslator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        EC2MultiRegionTranslator: typeof "
            },
            {
              "kind": "Reference",
              "text": "EC2MultiRegionTranslator",
              "canonicalReference": "cassandra-driver!~EC2MultiRegionTranslator:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    loadBalancing: {\n        AllowListPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "AllowListPolicy",
              "canonicalReference": "cassandra-driver!~AllowListPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        DCAwareRoundRobinPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "DCAwareRoundRobinPolicy",
              "canonicalReference": "cassandra-driver!~DCAwareRoundRobinPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        DefaultLoadBalancingPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "DefaultLoadBalancingPolicy",
              "canonicalReference": "cassandra-driver!~DefaultLoadBalancingPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        LoadBalancingPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "LoadBalancingPolicy",
              "canonicalReference": "cassandra-driver!~LoadBalancingPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        RoundRobinPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "RoundRobinPolicy",
              "canonicalReference": "cassandra-driver!~RoundRobinPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        TokenAwarePolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "TokenAwarePolicy",
              "canonicalReference": "cassandra-driver!~TokenAwarePolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        WhiteListPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "WhiteListPolicy",
              "canonicalReference": "cassandra-driver!~WhiteListPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    reconnection: {\n        ReconnectionPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "ReconnectionPolicy",
              "canonicalReference": "cassandra-driver!~ReconnectionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        ConstantReconnectionPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "ConstantReconnectionPolicy",
              "canonicalReference": "cassandra-driver!~ConstantReconnectionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        ExponentialReconnectionPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "ExponentialReconnectionPolicy",
              "canonicalReference": "cassandra-driver!~ExponentialReconnectionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    retry: {\n        IdempotenceAwareRetryPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "IdempotenceAwareRetryPolicy",
              "canonicalReference": "cassandra-driver!~IdempotenceAwareRetryPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        FallthroughRetryPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "FallthroughRetryPolicy",
              "canonicalReference": "cassandra-driver!~FallthroughRetryPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        RetryPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "RetryPolicy",
              "canonicalReference": "cassandra-driver!~RetryPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    speculativeExecution: {\n        NoSpeculativeExecutionPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "NoSpeculativeExecutionPolicy",
              "canonicalReference": "cassandra-driver!~NoSpeculativeExecutionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        SpeculativeExecutionPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "SpeculativeExecutionPolicy",
              "canonicalReference": "cassandra-driver!~SpeculativeExecutionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n        ConstantSpeculativeExecutionPolicy: typeof "
            },
            {
              "kind": "Reference",
              "text": "ConstantSpeculativeExecutionPolicy",
              "canonicalReference": "cassandra-driver!~ConstantSpeculativeExecutionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    timestampGeneration: {\n        TimestampGenerator: typeof "
            },
            {
              "kind": "Reference",
              "text": "TimestampGenerator",
              "canonicalReference": "cassandra-driver!~TimestampGenerator:class"
            },
            {
              "kind": "Content",
              "text": ";\n        MonotonicTimestampGenerator: typeof "
            },
            {
              "kind": "Reference",
              "text": "MonotonicTimestampGenerator",
              "canonicalReference": "cassandra-driver!~MonotonicTimestampGenerator:class"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    defaultAddressTranslator: () => "
            },
            {
              "kind": "Reference",
              "text": "AddressTranslator",
              "canonicalReference": "cassandra-driver!~AddressTranslator:class"
            },
            {
              "kind": "Content",
              "text": ";\n    defaultLoadBalancingPolicy: (localDc?: string) => "
            },
            {
              "kind": "Reference",
              "text": "LoadBalancingPolicy",
              "canonicalReference": "cassandra-driver!~LoadBalancingPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    defaultRetryPolicy: () => "
            },
            {
              "kind": "Reference",
              "text": "RetryPolicy",
              "canonicalReference": "cassandra-driver!~RetryPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    defaultReconnectionPolicy: () => "
            },
            {
              "kind": "Reference",
              "text": "ReconnectionPolicy",
              "canonicalReference": "cassandra-driver!~ReconnectionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    defaultSpeculativeExecutionPolicy: () => "
            },
            {
              "kind": "Reference",
              "text": "SpeculativeExecutionPolicy",
              "canonicalReference": "cassandra-driver!~SpeculativeExecutionPolicy:class"
            },
            {
              "kind": "Content",
              "text": ";\n    defaultTimestampGenerator: () => "
            },
            {
              "kind": "Reference",
              "text": "TimestampGenerator",
              "canonicalReference": "cassandra-driver!~TimestampGenerator:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "policies",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 54
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "cassandra-driver!QueryOptions:interface",
          "docComment": "/**\n * Query options  @typedef {Object} QueryOptions  @property {Boolean} [autoPage] Determines if the driver must retrieve the following result pages automatically. <p> This setting is only considered by the [Client#eachRow()]{@link Client#eachRow} method. For more information, check the [paging results documentation]{@link https://docs.datastax.com/en/developer/nodejs-driver/latest/features/paging/}. </p>  @property {Boolean} [captureStackTrace] Determines if the stack trace before the query execution should be maintained. <p> Useful for debugging purposes, it should be set to <code>false</code> under production environment as it adds an unnecessary overhead to each execution. </p> Default: false.  @property {Number} [consistency] [Consistency level]{@link module:types~consistencies}. <p> Defaults to <code>localOne</code> for Apache Cassandra and DSE deployments. For DataStax Astra, it defaults to <code>localQuorum</code>. </p>  @property {Object} [customPayload] Key-value payload to be passed to the server. On the Cassandra side, implementations of QueryHandler can use this data.  @property {String} [executeAs] The user or role name to act as when executing this statement. <p>When set, it executes as a different user/role than the one currently authenticated (a.k.a. proxy execution).</p> <p>This feature is only available in DSE 5.1+.</p>  @property {String|ExecutionProfile} [executionProfile] Name or instance of the [profile]{@link ExecutionProfile} to be used for this execution. If not set, it will the use \"default\" execution profile.  @property {Number} [fetchSize] Amount of rows to retrieve per page.  @property {Array|Array<Array>} [hints] Type hints for parameters given in the query, ordered as for the parameters. <p>For batch queries, an array of such arrays, ordered as with the queries in the batch.</p>  @property {Host} [host] The host that should handle the query. <p> Use of this option is <em>heavily discouraged</em> and should only be used in the following cases: </p> <ol> <li> Querying node-local tables, such as tables in the <code>system</code> and <code>system_views</code> keyspaces. </li> <li> Applying a series of schema changes, where it may be advantageous to execute schema changes in sequence on the same node. </li> </ol> <p> Configuring a specific host causes the configured [LoadBalancingPolicy]{@link module:policies/loadBalancing~LoadBalancingPolicy} to be completely bypassed. However, if the load balancing policy dictates that the host is at a [distance of ignored]{@link module:types~distance} or there is no active connectivity to the host, the request will fail with a [NoHostAvailableError]{@link module:errors~NoHostAvailableError}. </p>  @property {Boolean} [isIdempotent] Defines whether the query can be applied multiple times without changing the result beyond the initial application. <p> The query execution idempotence can be used at [RetryPolicy]{@link module:policies/retry~RetryPolicy} level to determine if an statement can be retried in case of request error or write timeout. </p> <p>Default: <code>false</code>.</p>  @property {String} [keyspace] Specifies the keyspace for the query. It is used for the following: <ol> <li>To indicate what keyspace the statement is applicable to (protocol V5+ only). This is useful when the query does not provide an explicit keyspace and you want to override the current {@link Client#keyspace}.</li> <li>For query routing when the query operates on a different keyspace than the current {@link Client#keyspace}.</li> </ol>  @property {Boolean} [logged] Determines if the batch should be written to the batchlog. Only valid for [Client#batch()]{@link Client#batch}, it will be ignored by other methods. Default: true.  @property {Boolean} [counter] Determines if its a counter batch. Only valid for [Client#batch()]{@link Client#batch}, it will be ignored by other methods. Default: false.  @property {Buffer|String} [pageState] Buffer or string token representing the paging state. <p>Useful for manual paging, if provided, the query will be executed starting from a given paging state.</p>  @property {Boolean} [prepare] Determines if the query must be executed as a prepared statement.  @property {Number} [readTimeout] When defined, it overrides the default read timeout (<code>socketOptions.readTimeout</code>) in milliseconds for this execution per coordinator. <p> Suitable for statements for which the coordinator may allow a longer server-side timeout, for example aggregation queries. </p> <p> A value of <code>0</code> disables client side read timeout for the execution. Default: <code>undefined</code>. </p>  @property {RetryPolicy} [retry] Retry policy for the query. <p> This property can be used to specify a different [retry policy]{@link module:policies/retry} to the one specified in the {@link ClientOptions}.policies. </p>  @property {Array} [routingIndexes] Index of the parameters that are part of the partition key to determine the routing.  @property {Buffer|Array} [routingKey] Partition key(s) to determine which coordinator should be used for the query.  @property {Array} [routingNames] Array of the parameters names that are part of the partition key to determine the routing. Only valid for non-prepared requests, it's recommended that you use the prepare flag instead.  @property {Number} [serialConsistency] Serial consistency is the consistency level for the serial phase of conditional updates. This option will be ignored for anything else that a conditional update/insert.  @property {Number|Long} [timestamp] The default timestamp for the query in microseconds from the unix epoch (00:00:00, January 1st, 1970). <p>If provided, this will replace the server side assigned timestamp as default timestamp.</p> <p>Use [generateTimestamp()]{@link module:types~generateTimestamp} utility method to generate a valid timestamp based on a Date and microseconds parts.</p>  @property {Boolean} [traceQuery] Enable query tracing for the execution. Use query tracing to diagnose performance problems related to query executions. Default: false. <p>To retrieve trace, you can call [Metadata.getTrace()]{@link module:metadata~Metadata#getTrace} method.</p>  @property {Object} [graphOptions] Default options for graph query executions. <p> These options are meant to provide defaults for all graph query executions. Consider using [execution profiles]{@link ExecutionProfile} if you plan to reuse different set of options across different query executions. </p>  @property {String} [graphOptions.language] The graph language to use in graph queries. Default: <code>'gremlin-groovy'</code>.  @property {String} [graphOptions.name] The graph name to be used in all graph queries. <p> This property is required but there is no default value for it. This value can be overridden at query level. </p>  @property {Number} [graphOptions.readConsistency] Overrides the [consistency level]{@link module:types~consistencies} defined in the query options for graph read queries.  @property {Number} [graphOptions.readTimeout] Overrides the default per-host read timeout (in milliseconds) for all graph queries. Default: <code>0</code>. <p> Use <code>null</code> to reset the value and use the default on <code>socketOptions.readTimeout</code> . </p>  @property {String} [graphOptions.source] The graph traversal source name to use in graph queries. Default: <code>'g'</code>.  @property {Number} [graphOptions.writeConsistency] Overrides the [consistency level]{@link module:types~consistencies} defined in the query options for graph write queries.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "interface QueryOptions "
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "releaseTag": "Public",
          "name": "QueryOptions",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#autoPage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoPage?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoPage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#captureStackTrace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "captureStackTrace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "captureStackTrace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#consistency:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "consistency?: "
                },
                {
                  "kind": "Reference",
                  "text": "consistencies",
                  "canonicalReference": "cassandra-driver!~consistencies:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "consistency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#counter:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "counter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "counter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#customPayload:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customPayload?: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "customPayload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#executeAs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executeAs?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "executeAs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#executionProfile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "executionProfile?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "ExecutionProfile",
                  "canonicalReference": "cassandra-driver!ExecutionProfile:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "executionProfile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#fetchSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fetchSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "fetchSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#graphOptions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "graphOptions?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        language?: string;\n        name?: string;\n        readConsistency?: number;\n        readTimeout?: number;\n        source?: string;\n        writeConsistency?: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "graphOptions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#hints:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hints?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string> | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "hints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#host:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "host?: "
                },
                {
                  "kind": "Reference",
                  "text": "Host",
                  "canonicalReference": "cassandra-driver!~Host:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "host",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#isIdempotent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isIdempotent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "isIdempotent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#keyspace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keyspace?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keyspace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#logged:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logged?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "logged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#pageState:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pageState?: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": " | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pageState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#prepare:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "prepare?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "prepare",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#readTimeout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readTimeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "readTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#retry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "retry?: "
                },
                {
                  "kind": "Reference",
                  "text": "RetryPolicy",
                  "canonicalReference": "cassandra-driver!~RetryPolicy:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "retry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#routingIndexes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "routingIndexes?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "routingIndexes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#routingKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "routingKey?: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "routingKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#routingNames:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "routingNames?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "routingNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#serialConsistency:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "serialConsistency?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "serialConsistency",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#timestamp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp?: "
                },
                {
                  "kind": "Content",
                  "text": "number | "
                },
                {
                  "kind": "Reference",
                  "text": "Long",
                  "canonicalReference": "long!Long:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "cassandra-driver!QueryOptions#traceQuery:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "traceQuery?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "traceQuery",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!token:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "token: "
            },
            {
              "kind": "Content",
              "text": "{\n    Token: typeof "
            },
            {
              "kind": "Reference",
              "text": "Token",
              "canonicalReference": "cassandra-driver!~Token:class"
            },
            {
              "kind": "Content",
              "text": ";\n    TokenRange: typeof "
            },
            {
              "kind": "Reference",
              "text": "TokenRange",
              "canonicalReference": "cassandra-driver!~TokenRange:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "token",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!tracker:var",
          "docComment": "/**\n * Tracker module.  @module tracker\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$6: "
            },
            {
              "kind": "Content",
              "text": "{\n    RequestTracker: typeof "
            },
            {
              "kind": "Reference",
              "text": "RequestTracker",
              "canonicalReference": "cassandra-driver!~RequestTracker:class"
            },
            {
              "kind": "Content",
              "text": ";\n    RequestLogger: typeof "
            },
            {
              "kind": "Reference",
              "text": "RequestLogger",
              "canonicalReference": "cassandra-driver!~RequestLogger:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "tracker",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!types:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default$7: "
            },
            {
              "kind": "Content",
              "text": "{\n    opcodes: {\n        error: number;\n        startup: number;\n        ready: number;\n        authenticate: number;\n        credentials: number;\n        options: number;\n        supported: number;\n        query: number;\n        result: number;\n        prepare: number;\n        execute: number;\n        register: number;\n        event: number;\n        batch: number;\n        authChallenge: number;\n        authResponse: number;\n        authSuccess: number;\n        cancel: number;\n        isInRange: (code: any) => boolean;\n    };\n    consistencies: typeof "
            },
            {
              "kind": "Reference",
              "text": "consistencies",
              "canonicalReference": "cassandra-driver!~consistencies:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    consistencyToString: {};\n    dataTypes: typeof "
            },
            {
              "kind": "Reference",
              "text": "dataTypes",
              "canonicalReference": "cassandra-driver!~dataTypes:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    getDataTypeNameByCode: typeof "
            },
            {
              "kind": "Reference",
              "text": "getDataTypeNameByCode",
              "canonicalReference": "cassandra-driver!~getDataTypeNameByCode:function"
            },
            {
              "kind": "Content",
              "text": ";\n    distance: typeof "
            },
            {
              "kind": "Reference",
              "text": "distance",
              "canonicalReference": "cassandra-driver!~distance:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    frameFlags: {\n        compression: number;\n        tracing: number;\n        customPayload: number;\n        warning: number;\n    };\n    protocolEvents: {\n        topologyChange: string;\n        statusChange: string;\n        schemaChange: string;\n    };\n    protocolVersion: typeof "
            },
            {
              "kind": "Reference",
              "text": "protocolVersion",
              "canonicalReference": "cassandra-driver!~protocolVersion:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    responseErrorCodes: typeof "
            },
            {
              "kind": "Reference",
              "text": "responseErrorCodes",
              "canonicalReference": "cassandra-driver!~responseErrorCodes:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    resultKind: {\n        voidResult: number;\n        rows: number;\n        setKeyspace: number;\n        prepared: number;\n        schemaChange: number;\n    };\n    timeuuid: typeof "
            },
            {
              "kind": "Reference",
              "text": "timeuuid",
              "canonicalReference": "cassandra-driver!~timeuuid:function"
            },
            {
              "kind": "Content",
              "text": ";\n    uuid: typeof "
            },
            {
              "kind": "Reference",
              "text": "uuid",
              "canonicalReference": "cassandra-driver!~uuid:function"
            },
            {
              "kind": "Content",
              "text": ";\n    BigDecimal: typeof "
            },
            {
              "kind": "Reference",
              "text": "BigDecimal",
              "canonicalReference": "cassandra-driver!~BigDecimal:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Duration: typeof "
            },
            {
              "kind": "Reference",
              "text": "Duration",
              "canonicalReference": "cassandra-driver!~Duration:class"
            },
            {
              "kind": "Content",
              "text": ";\n    FrameHeader: typeof "
            },
            {
              "kind": "Reference",
              "text": "FrameHeader",
              "canonicalReference": "cassandra-driver!~FrameHeader:class"
            },
            {
              "kind": "Content",
              "text": ";\n    InetAddress: typeof "
            },
            {
              "kind": "Reference",
              "text": "InetAddress",
              "canonicalReference": "cassandra-driver!~InetAddress:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Integer: typeof "
            },
            {
              "kind": "Reference",
              "text": "Integer",
              "canonicalReference": "cassandra-driver!~Integer:class"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalDate: typeof "
            },
            {
              "kind": "Reference",
              "text": "LocalDate",
              "canonicalReference": "cassandra-driver!~LocalDate:class"
            },
            {
              "kind": "Content",
              "text": ";\n    LocalTime: typeof "
            },
            {
              "kind": "Reference",
              "text": "LocalTime",
              "canonicalReference": "cassandra-driver!~LocalTime:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Long: typeof "
            },
            {
              "kind": "Reference",
              "text": "Long",
              "canonicalReference": "long!Long:class"
            },
            {
              "kind": "Content",
              "text": ";\n    ResultSet: typeof "
            },
            {
              "kind": "Reference",
              "text": "ResultSet",
              "canonicalReference": "cassandra-driver!~ResultSet:class"
            },
            {
              "kind": "Content",
              "text": ";\n    ResultStream: typeof "
            },
            {
              "kind": "Reference",
              "text": "ResultStream",
              "canonicalReference": "cassandra-driver!~ResultStream:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Row: typeof "
            },
            {
              "kind": "Reference",
              "text": "Row",
              "canonicalReference": "cassandra-driver!~Row:class"
            },
            {
              "kind": "Content",
              "text": ";\n    DriverError: typeof "
            },
            {
              "kind": "Reference",
              "text": "DriverError",
              "canonicalReference": "cassandra-driver!~DriverError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    TimeoutError: typeof "
            },
            {
              "kind": "Reference",
              "text": "TimeoutError",
              "canonicalReference": "cassandra-driver!~TimeoutError:class"
            },
            {
              "kind": "Content",
              "text": ";\n    TimeUuid: typeof "
            },
            {
              "kind": "Reference",
              "text": "TimeUuid",
              "canonicalReference": "cassandra-driver!~TimeUuid:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Tuple: typeof "
            },
            {
              "kind": "Reference",
              "text": "Tuple",
              "canonicalReference": "cassandra-driver!~Tuple:class"
            },
            {
              "kind": "Content",
              "text": ";\n    Uuid: typeof "
            },
            {
              "kind": "Reference",
              "text": "Uuid",
              "canonicalReference": "cassandra-driver!~Uuid:class"
            },
            {
              "kind": "Content",
              "text": ";\n    unset: "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<{\n        readonly unset: true;\n    }>;\n    generateTimestamp: typeof "
            },
            {
              "kind": "Reference",
              "text": "generateTimestamp",
              "canonicalReference": "cassandra-driver!~generateTimestamp:function"
            },
            {
              "kind": "Content",
              "text": ";\n    Vector: typeof "
            },
            {
              "kind": "Reference",
              "text": "Vector",
              "canonicalReference": "cassandra-driver!~Vector:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "types",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 56
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "cassandra-driver!version:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "version: "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "out/cassandra-rollup.d.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "version",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
